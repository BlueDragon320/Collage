# -*- coding: utf-8 -*-
"""PP CLASS-05.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k2-45OXe5pFyntJVayg4ftpmmKhSirDN
"""

# Q1] Write a Python Program



# Q2] Write a Python Program that attempts to read a file and display its contents
try:
  # open a file for reading
  file = open("example.txt", "r")
  data = file.read() # attempt to read the file
  print("File content:", data)
except FileNotFoundError:
  print("Error: the file was not found.")
except Exception as e:
  print("An error occurred: {e}")
finally:
  # This block will always run, even if theres an wrror
  if 'file' in locals() and not file.closed:
    file.close() # Ensure the file is closed
  print("File has been closed.")

def check_age(age):
  if age<18:
    raise ValueError("Age must be 18 or older.") # Raises an error
  else:
    print("Age is valid.")
try:
  check_age(9) # This will raise a valueError
except ValueError as e:
  print(F"Error: {e}")



# List with 5 elemets (Index range: 0 to 4)
numbers = [10,20,30,40,50]
try:
  # Taking use input for index
  index = int(input("Enter the index to access (0-4): "))
  # Attempting to access adn index
  print(f"Value at idnex: {index}: {numbers[index]}")
except IndexError:
  print("Error: Index out of range! Please enter a valid index between 0 to 4")
except ValueError:
  print("Error: Invalid input! Please enter an integer.")

# Function to calculate the average of 5 numbers
def compute_average(numbers):
  """Computers and returns the average of a list of 5 numbers."""
  return sum(numbers)/len(numbers)
# Taking the user input for 5 numbers
numbers = []
print("Enter 5 numbers")
for i in range(5):
  num = float(input(f"Enter number {i+1}: "))
  numbers.append(num)
# Calling the function and storing the result
average  = compute_average(numbers)
meandeviation = average
# Displaying the result
print(f"\n The average of the given 5 numbers is: {average:.2f}")

# def compute_mean_deviation(numbers):
#     """Computes and returns the mean deviation of a list of numbers."""
#     mean = sum(numbers) / len(numbers)
#     absolute_differences = [abs(num - mean) for num in numbers]
#     mean_deviation = sum(absolute_differences) / len(numbers)
#     return mean_deviation
# numbers = []
# print("Enter 5 numbers:")
# for i in range(5):
#     num = float(input(f"Enter number {i + 1}: "))
#     numbers.append(num)
# mean_deviation = compute_mean_deviation(numbers)
# print(f"\nThe mean deviation of the given 5 numbers is: {mean_deviation:.2f}")

import math
def compute_std_deviation(numbers):
    """Computes and returns the mean deviation of a list of numbers."""
    global realsd
    mean = sum(numbers) / len(numbers)
    absolute_differences = [(abs(num - mean)**2) for num in numbers]
    std_deviation = sum(absolute_differences) / len(numbers)
    realsd = float(math.sqrt(std_deviation))
    return realsd
numbers = []
print("Enter 5 numbers:")
for i in range(5):
    num = float(input(f"Enter number {i + 1}: "))
    numbers.append(num)
std_deviation = compute_std_deviation(numbers)
print(f"\nThe Standard deviation of the given 5 numbers is: {realsd:.2f}")

# E-Commerce Order Management System

# 1. Product Management (List Operations)
products = ["Laptop", "Smartphone", "Headphones", "Smartwatch"]

def manage_products():
    while True:
        print("\nProduct Management")
        print("1. View Products")
        print("2. Add Product")
        print("3. Remove Product")
        print("4. Sort Products")
        print("5. Count Products")
        print("6. Exit")

        choice = int(input("Enter your choice: "))
        if choice == 1:
            print("Available Products:", products)
        elif choice == 2:
            new_product = input("Enter product name to add: ")
            products.append(new_product)
            print(f"{new_product} added.")
        elif choice == 3:
            product_to_remove = input("Enter product name to remove: ")
            if product_to_remove in products:
                products.remove(product_to_remove)
                print(f"{product_to_remove} removed.")
            else:
                print(f"{product_to_remove} not found.")
        elif choice == 4:
            products.sort()
            print("Products sorted alphabetically:", products)
        elif choice == 5:
            print("Total number of products:", len(products))
        elif choice == 6:
            break
        else:
            print("Invalid choice. Try again.")

# 2. Customer Order Processing (Tuple Operations)
orders = [(1, "Alice", "Laptop", 1), (2, "Bob", "Smartphone", 2)]

def manage_orders():
    while True:
        print("\nCustomer Order Processing")
        print("1. View All Orders")
        print("2. View Specific Order")
        print("3. Exit")

        choice = int(input("Enter your choice: "))
        if choice == 1:
            for order in orders:
                print(order)
        elif choice == 2:
            order_id = int(input("Enter Order ID: "))
            for order in orders:
                if order[0] == order_id:
                    print("Order Details:", order)
                    break
            else:
                print("Order not found.")
        elif choice == 3:
            break
        else:
            print("Invalid choice. Try again.")

# 3. Customer Database (Dictionary Operations)
customers = {101: ("Alice", "alice@example.com", "123 Main St"),
             102: ("Bob", "bob@example.com", "456 Oak Ave")}

def manage_customers():
    while True:
        print("\nCustomer Database")
        print("1. View All Customers")
        print("2. Update Customer Address")
        print("3. Remove Customer")
        print("4. Exit")

        choice = int(input("Enter your choice: "))
        if choice == 1:
            for cid, details in customers.items():
                print(f"Customer ID: {cid}, Details: {details}")
        elif choice == 2:
            customer_id = int(input("Enter Customer ID: "))
            if customer_id in customers:
                new_address = input("Enter new address: ")
                name, email, _ = customers[customer_id]
                customers[customer_id] = (name, email, new_address)
                print("Address updated.")
            else:
                print("Customer not found.")
        elif choice == 3:
            customer_id = int(input("Enter Customer ID to remove: "))
            if customer_id in customers:
                customers.pop(customer_id)
                print("Customer removed.")
            else:
                print("Customer not found.")
        elif choice == 4:
            break
        else:
            print("Invalid choice. Try again.")

# Main Menu
while True:
    print("\nE-Commerce Order Management System")
    print("1. Product Management")
    print("2. Customer Order Processing")
    print("3. Customer Database")
    print("4. Exit")

    main_choice = int(input("Enter your choice: "))
    if main_choice == 1:
        manage_products()
    elif main_choice == 2:
        manage_orders()
    elif main_choice == 3:
        manage_customers()
    elif main_choice == 4:
        print("Exiting the system. Goodbye!")
        break
    else:
        print("Invalid choice. Try again.")

# Python Program to Compute the Roots of a Quadratic Equation
import math

a = float(input("Enter coefficient a: "))
b = float(input("Enter coefficient b: "))
c = float(input("Enter coefficient c: "))

discriminant = (b ** 2) - (4 * a * c)

if discriminant > 0:
    root1 = (-b + math.sqrt(discriminant)) / (2 * a)
    root2 = (-b - math.sqrt(discriminant)) / (2 * a)
    print(f"Two distinct real roots: {root1:.2f} and {root2:.2f}")
elif discriminant == 0:
    root = -b / (2 * a)
    print(f"One real root: {root:.2f}")
else:
    real_part = -b / (2 * a)
    imaginary_part = math.sqrt(abs(discriminant)) / (2 * a)
    print(f"Two complex roots: {real_part:.2f} Â± {imaginary_part:.2f}i")